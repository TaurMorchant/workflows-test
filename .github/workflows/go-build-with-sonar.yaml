# This workflow handles Go builds with optional Sonar analysis.
# It can be called from other workflows and supports different build modes based on:
# - Actor type (bot or user)
#
# Build modes:
# 1. All builds:
#    - Automatically detects Go module location using go.mod file
#    - Runs tests with coverage
#    - Sonar analysis is skipped for restricted actors
#
# Sonar analysis:
# - Only runs if both sonar-project-key and sonar-token are provided
# - Always skipped for restricted actors
# - Requires proper Sonar configuration (organization, host URL, etc.)
#
# Restricted actors:
# - Defined in .github/config/build-config.yaml
# - Cannot run Sonar analysis
#
# Working directory:
# - Automatically detected based on go.mod file location
# - All Go commands are executed in the directory containing go.mod

name: Go build + Sonar

on:
  workflow_call:
    inputs:
      actor:
        description: 'GitHub actor (user or bot) that triggered the workflow'
        required: true
        type: string
      # Sonar configuration
      sonar-project-key:
        description: 'Sonar project key for analysis. It must be specified explicitly, as the qubership-core-infra repository may have its own sonar-project-key. '
        required: false
        type: string
    secrets:
      sonar-token:
        description: 'Token for Sonar authentication'
        required: false

jobs:
  prepare-variables:
    name: Prepare build variables
    runs-on: ubuntu-latest
    outputs:
      run-sonar: ${{ steps.prepare.outputs.run-sonar }}
    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          repository: TaurMorchant/workflows-test
          ref: main
          path: workflow-repo

      - name: Prepare variables
        id: prepare
        run: |
          # Store input variables
          ACTOR="${{ inputs.actor }}"
          CONFIG_FILE="workflow-repo/.github/config/build-config.yaml"

          # Validate config file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error:: Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          # Check if actor is restricted
          if yq e '.restricted-actors[]' "$CONFIG_FILE" | grep -Fxq "$ACTOR"; then
            IS_RESTRICTED_ACTOR=true
            echo "::info:: Actor $ACTOR is restricted"
          else
            IS_RESTRICTED_ACTOR=false
            echo "::info:: Actor $ACTOR is not restricted"
          fi

          # Set sonar run flag
          if [ -z "${{ inputs.sonar-project-key }}" ] || [ -z "${{ secrets.sonar-token }}" ]; then
            echo "::info:: Sonar configuration is missing, skipping Sonar analysis"
            echo "run-sonar=false" >> $GITHUB_OUTPUT
          elif [ "$IS_RESTRICTED_ACTOR" = true ]; then
            echo "run-sonar=false" >> $GITHUB_OUTPUT
          else
            echo "run-sonar=true" >> $GITHUB_OUTPUT
          fi

      - name: Output build configuration
        run: |
          echo "::info:: Run Sonar: ${{ steps.prepare.outputs.run-sonar }}"

  build:
    needs: prepare-variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find go.mod files
        id: find
        run: |
          GO_MOD_FILE=$(find . -name go.mod | head -n 1)
          if [ -f ${GO_MOD_FILE} ]; then
            echo "GO_MOD_FILE=${GO_MOD_FILE}" >> $GITHUB_ENV
            echo "GO_MOD_DIR=$(dirname ${GO_MOD_FILE})" >> $GITHUB_ENV
            MODULE=$(cat ${GO_MOD_FILE} | grep -e "^module " | awk '{print $2}')
            echo "MODULE=${MODULE}" >> $GITHUB_ENV
          else
            echo "No go.mod file found"
            exit 1
          fi
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          cache: true
          cache-dependency-path: "**/*.sum"
          go-version-file: "${{ env.GO_MOD_FILE }}"

      - name: Test with coverage
        working-directory: ${{ env.GO_MOD_DIR }}
        run: go test -v ./... -coverprofile coverage.out

      - name: Upload coverage report to SonarCloud
        if: needs.prepare-variables.outputs.run-sonar == 'true'
        working-directory: ${{ env.GO_MOD_DIR }}
        run: |
          npm install -g sonar-scanner@3.1.0
          sonar-scanner \
            -Dproject.settings=sonar-project.properties \
            -Dsonar.projectKey=${{ inputs.sonar-project-key }} \
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=${{ vars.SONAR_HOST_URL }} \
            -Dsonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
